# This is a basic workflow to help you get started with Actions
name: Android CI/CD - Release to Play Store

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-release:
    runs-on: ubuntu-latest
    env: # Define environment variables that Gradle will use
      UPLOAD_KEYSTORE_PASSWORD: ${{ secrets.UPLOAD_KEYSTORE_PASSWORD }}
      UPLOAD_KEY_ALIAS: ${{ secrets.UPLOAD_KEY_ALIAS }}
      UPLOAD_KEY_PASSWORD: ${{ secrets.UPLOAD_KEY_PASSWORD }}
      # UPLOAD_KEYSTORE_FILE will be set dynamically in a step below
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17' # Or your project's JDK version
          distribution: 'temurin'
          cache: gradle

          # This step creates the keystore file from the Base64 secret
          # and sets the UPLOAD_KEYSTORE_FILE environment variable for subsequent steps.
          #        run: echo "${{ secrets.UPLOAD_KEYSTORE_BASE64 }}" | base64 -d > keystore.jks

      - name: Decode Keystore and Set Path
        run: |
             echo "${{ secrets.UPLOAD_KEYSTORE_BASE64 }}" | base64 --decode > release.jks
             echo "UPLOAD_KEYSTORE_FILE=$(pwd)/release.jks" >> $GITHUB_ENV



      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build aab
        run: ./gradlew bundleRelease # Or your specific bundle task



      - name: Upload AAB to Google Play

        uses: r0adkll/upload-google-play@v1.1.3 # Check for the latest version
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON_PLAIN_TEXT }}
          packageName: com.andrayudu.cicdin # Replace with your app's package name
          releaseFiles: app/build/outputs/bundle/release/*.aab # Path to your AAB
          track: internal # Or alpha, beta, production, internalappsharing
          # userFraction: 0.5 # For staged rollouts (e.g., 50%) - optional
          # whatsNewDirectory: whatsnew/ # Path to release notes (optional)
          # mappingFile: app/build/outputs/mapping/release/mapping.txt # Optional mapping file
          # debugSymbols: app/build/outputs/native-debug-symbols/release/*.zip # Optional native debug symbols
          # status: completed # Or 'draft', 'inProgress'





#  build:
#
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
#
#    # Steps represent a sequence of tasks that will be executed as part of the job
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - name: Checkout
#        uses: actions/checkout@v4.1.0
#
#      - name: Setup Java JDK
#        uses: actions/setup-java@v3.13.0
#        with:
#          java-version: '17'
#          distribution: 'adopt'
#
#      # Runs a single command using the runners shell
#      - name: Build with Gradle
#        run: ./gradlew build
#
#      - name: Upload a Build Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: AndroidCICD.apk
#          path: app/build/outputs/apk/debug/app-debug.apk